package hz.mapme;



import android.app.Activity;
import android.app.AlertDialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;

import com.glympse.android.lite.GGlympseLite;
import com.glympse.android.lite.LiteFactory;
public class GlympseLiteWrapper
{
	 public static final String BASE_URL = "sandbox.glympse.com";
	 public static final String API_KEY = "<< Your API key >>";

	    private static GGlympseLite _glympse = null; public void start(Context context)
 {
 if ( null == _glympse )
 {
 _glympse = LiteFactory. createGlympse(context, BASE_URL, API_KEY); 
 _glympse. start();
 }
 }
	    public void start(final Context context)
	    {
	        if (null == _glympse)
	        {
	            // TODO: This can be removed, when project is configured.
	            if (API_KEY.equals("<< Your API key >>"))
	            {
	                new AlertDialog.Builder(context)
	                    .setMessage("Valid API key has not been configured.\n\nPlease visit:\nhttp://developer.glympse.com\nif you need a key.")
	                    .setPositiveButton("Will do!", new DialogInterface.OnClickListener()
	                    { 
	                        @Override public void onClick(DialogInterface dialog, int which)
	                        {
	                            _glympse = null;
	                            ((Activity) context).finish();
	                        }
	                    }).show();
	            }

	            // Create Glympse platform and pass in server URL and API key.
	            _glympse = LiteFactory.createGlympse(context, BASE_URL, API_KEY);

	            // Required to get Glympse History
	            _glympse.setRestoreHistory(true);

	            // Start Glympse platform right away.
	            _glympse.start();
	        }
	    }
 public void stop()
 {
 if ( null != _glympse )
 {
 _glympse. stop();
 _glympse = null;
 }
 }
 public GGlympseLite getGlympse() { return _glympse; }
 private static GlympseLiteWrapper _instance;
 public static synchronized GlympseLiteWrapper instance()
 {
     if (null == _instance)
     {
         _instance = new GlympseLiteWrapper();
     }
     return _instance;
 } 
}